// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetData, GetResponses, GetSecurityAwnserData, GetSecurityAwnserResponses, PostCreateUserData, PostCreateUserResponses, PostCreateUserErrors, PostLoginData, PostLoginResponses, PostLoginErrors, GetProfileData, GetProfileResponses, GetProfileErrors, PostResetPasswordData, PostResetPasswordResponses, PostResetPasswordErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Hello World endpoint
 */
export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const getSecurityAwnser = <ThrowOnError extends boolean = false>(options?: Options<GetSecurityAwnserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSecurityAwnserResponses, unknown, ThrowOnError>({
        url: '/security-awnser',
        ...options
    });
};

/**
 * Create a new user
 */
export const postCreateUser = <ThrowOnError extends boolean = false>(options: Options<PostCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCreateUserResponses, PostCreateUserErrors, ThrowOnError>({
        url: '/create-user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 */
export const postLogin = <ThrowOnError extends boolean = false>(options: Options<PostLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLoginResponses, PostLoginErrors, ThrowOnError>({
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get user profile
 */
export const getProfile = <ThrowOnError extends boolean = false>(options?: Options<GetProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProfileResponses, GetProfileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/profile',
        ...options
    });
};

/**
 * Resetar senha usando nome e perguntas de seguran√ßa
 */
export const postResetPassword = <ThrowOnError extends boolean = false>(options: Options<PostResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostResetPasswordResponses, PostResetPasswordErrors, ThrowOnError>({
        url: '/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};