// This file is auto-generated by @hey-api/openapi-ts

import { type Options, get, getSecurityAwnser, postCreateUser, postLogin, getProfile, postResetPassword } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetData, GetSecurityAwnserData, PostCreateUserData, PostCreateUserError, PostCreateUserResponse, PostLoginData, PostLoginError, PostLoginResponse, GetProfileData, PostResetPasswordData, PostResetPasswordError, PostResetPasswordResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getQueryKey = (options?: Options<GetData>) => createQueryKey('get', options);

/**
 * Hello World endpoint
 */
export const getOptions = (options?: Options<GetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await get({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getQueryKey(options)
    });
};

export const getSecurityAwnserQueryKey = (options?: Options<GetSecurityAwnserData>) => createQueryKey('getSecurityAwnser', options);

export const getSecurityAwnserOptions = (options?: Options<GetSecurityAwnserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSecurityAwnser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSecurityAwnserQueryKey(options)
    });
};

export const postCreateUserQueryKey = (options: Options<PostCreateUserData>) => createQueryKey('postCreateUser', options);

/**
 * Create a new user
 */
export const postCreateUserOptions = (options: Options<PostCreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCreateUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCreateUserQueryKey(options)
    });
};

/**
 * Create a new user
 */
export const postCreateUserMutation = (options?: Partial<Options<PostCreateUserData>>): UseMutationOptions<PostCreateUserResponse, PostCreateUserError, Options<PostCreateUserData>> => {
    const mutationOptions: UseMutationOptions<PostCreateUserResponse, PostCreateUserError, Options<PostCreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postCreateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postLoginQueryKey = (options: Options<PostLoginData>) => createQueryKey('postLogin', options);

/**
 * Login
 */
export const postLoginOptions = (options: Options<PostLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postLoginQueryKey(options)
    });
};

/**
 * Login
 */
export const postLoginMutation = (options?: Partial<Options<PostLoginData>>): UseMutationOptions<PostLoginResponse, PostLoginError, Options<PostLoginData>> => {
    const mutationOptions: UseMutationOptions<PostLoginResponse, PostLoginError, Options<PostLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProfileQueryKey = (options?: Options<GetProfileData>) => createQueryKey('getProfile', options);

/**
 * Get user profile
 */
export const getProfileOptions = (options?: Options<GetProfileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProfile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProfileQueryKey(options)
    });
};

export const postResetPasswordQueryKey = (options: Options<PostResetPasswordData>) => createQueryKey('postResetPassword', options);

/**
 * Resetar senha usando nome e perguntas de segurança
 */
export const postResetPasswordOptions = (options: Options<PostResetPasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postResetPassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postResetPasswordQueryKey(options)
    });
};

/**
 * Resetar senha usando nome e perguntas de segurança
 */
export const postResetPasswordMutation = (options?: Partial<Options<PostResetPasswordData>>): UseMutationOptions<PostResetPasswordResponse, PostResetPasswordError, Options<PostResetPasswordData>> => {
    const mutationOptions: UseMutationOptions<PostResetPasswordResponse, PostResetPasswordError, Options<PostResetPasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postResetPassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};